(80, 81),   # DMFLAG8 (81-81)
(81, 82),   # QCFLAG8 (82-82)
(82, 83),   # DSFLAG8 (83-83)
# VALUE9, DMFLAG9, QCFLAG9, DSFLAG9 (84-91)
(83, 88),   # VALUE9 (84-88)
(88, 89),   # DMFLAG9 (89-89)
(89, 90),   # QCFLAG9 (90-90)
(90, 91),   # DSFLAG9 (91-91)
# VALUE10, DMFLAG10, QCFLAG10, DSFLAG10 (92-99)
(91, 96),   # VALUE10 (92-96)
(96, 97),   # DMFLAG10 (97-97)
(97, 98),   # QCFLAG10 (98-98)
(98, 99),   # DSFLAG10 (99-99)
# VALUE11, DMFLAG11, QCFLAG11, DSFLAG11 (100-107)
(99, 104),  # VALUE11 (100-104)
(104, 105), # DMFLAG11 (105-105)
(105, 106), # QCFLAG11 (106-106)
(106, 107), # DSFLAG11 (107-107)
# VALUE12, DMFLAG12, QCFLAG12, DSFLAG12 (108-115)
(107, 112), # VALUE12 (108-112)
(112, 113), # DMFLAG12 (113-113)
(113, 114), # QCFLAG12 (114-114)
(114, 115), # DSFLAG12 (115-115)
]
# Define column names
columns = [
'ID', 'YEAR', 'ELEMENT',
'VALUE1', 'DMFLAG1', 'QCFLAG1', 'DSFLAG1',
'VALUE2', 'DMFLAG2', 'QCFLAG2', 'DSFLAG2',
'VALUE3', 'DMFLAG3', 'QCFLAG3', 'DSFLAG3',
'VALUE4', 'DMFLAG4', 'QCFLAG4', 'DSFLAG4',
'VALUE5', 'DMFLAG5', 'QCFLAG5', 'DSFLAG5',
'VALUE6', 'DMFLAG6', 'QCFLAG6', 'DSFLAG6',
'VALUE7', 'DMFLAG7', 'QCFLAG7', 'DSFLAG7',
'VALUE8', 'DMFLAG8', 'QCFLAG8', 'DSFLAG8',
'VALUE9', 'DMFLAG9', 'QCFLAG9', 'DSFLAG9',
'VALUE10', 'DMFLAG10', 'QCFLAG10', 'DSFLAG10',
'VALUE11', 'DMFLAG11', 'QCFLAG11', 'DSFLAG11',
'VALUE12', 'DMFLAG12', 'QCFLAG12', 'DSFLAG12'
]
# Read the fixed-width file
df = pd.read_fwf(filepath, colspecs=colspecs, header=None, names=columns)
# Convert temperature values to numeric and replace -9999 with NaN
value_columns = [f'VALUE{i}' for i in range(1, 13)]
# **Workaround: Convert to string first, then to numeric**
for col in value_columns:
df[col] = df[col].astype(str).str.strip().replace('-9999', pd.NA)
# Fill NAType with a specific value before conversion
df[col] = df[col].fillna(-9999).astype(float)
# Convert temperature values to Celsius by dividing by 100
df[value_columns] = df[value_columns] / 100.0
data = read_temperature_data('~/Downloads/ghcnm.v4.0.1.20240916/ghcnm.tavg.v4.0.1.20240916.qfe.dat')
import pandas as pd
def read_temperature_data(filepath):
# Define the column specifications (start and end positions, inclusive)
colspecs = [
(0, 10),    # ID (1-11)
(11, 15),   # YEAR (12-15)
(15, 19),   # ELEMENT (16-19)
# VALUE1, DMFLAG1, QCFLAG1, DSFLAG1 (20-27)
(19, 24),   # VALUE1 (20-24)
(24, 25),   # DMFLAG1 (25-25)
(25, 26),   # QCFLAG1 (26-26)
(26, 27),   # DSFLAG1 (27-27)
# VALUE2, DMFLAG2, QCFLAG2, DSFLAG2 (28-35)
(27, 32),   # VALUE2 (28-32)
(32, 33),   # DMFLAG2 (33-33)
(33, 34),   # QCFLAG2 (34-34)
(34, 35),   # DSFLAG2 (35-35)
# VALUE3, DMFLAG3, QCFLAG3, DSFLAG3 (36-43)
(35, 40),   # VALUE3 (36-40)
(40, 41),   # DMFLAG3 (41-41)
(41, 42),   # QCFLAG3 (42-42)
(42, 43),   # DSFLAG3 (43-43)
# VALUE4, DMFLAG4, QCFLAG4, DSFLAG4 (44-51)
(43, 48),   # VALUE4 (44-48)
(48, 49),   # DMFLAG4 (49-49)
(49, 50),   # QCFLAG4 (50-50)
(50, 51),   # DSFLAG4 (51-51)
# VALUE5, DMFLAG5, QCFLAG5, DSFLAG5 (52-59)
(51, 56),   # VALUE5 (52-56)
(56, 57),   # DMFLAG5 (57-57)
(57, 58),   # QCFLAG5 (58-58)
(58, 59),   # DSFLAG5 (59-59)
# VALUE6, DMFLAG6, QCFLAG6, DSFLAG6 (60-67)
(59, 64),   # VALUE6 (60-64)
(64, 65),   # DMFLAG6 (65-65)
(65, 66),   # QCFLAG6 (66-66)
(66, 67),   # DSFLAG6 (67-67)
# VALUE7, DMFLAG7, QCFLAG7, DSFLAG7 (68-75)
(67, 72),   # VALUE7 (68-72)
(72, 73),   # DMFLAG7 (73-73)
(73, 74),   # QCFLAG7 (74-74)
(74, 75),   # DSFLAG7 (75-75)
# VALUE8, DMFLAG8, QCFLAG8, DSFLAG8 (76-83)
(75, 80),   # VALUE8 (76-80)
(80, 81),   # DMFLAG8 (81-81)
(81, 82),   # QCFLAG8 (82-82)
(82, 83),   # DSFLAG8 (83-83)
# VALUE9, DMFLAG9, QCFLAG9, DSFLAG9 (84-91)
(83, 88),   # VALUE9 (84-88)
(88, 89),   # DMFLAG9 (89-89)
(89, 90),   # QCFLAG9 (90-90)
(90, 91),   # DSFLAG9 (91-91)
# VALUE10, DMFLAG10, QCFLAG10, DSFLAG10 (92-99)
(91, 96),   # VALUE10 (92-96)
(96, 97),   # DMFLAG10 (97-97)
(97, 98),   # QCFLAG10 (98-98)
(98, 99),   # DSFLAG10 (99-99)
# VALUE11, DMFLAG11, QCFLAG11, DSFLAG11 (100-107)
(99, 104),  # VALUE11 (100-104)
(104, 105), # DMFLAG11 (105-105)
(105, 106), # QCFLAG11 (106-106)
(106, 107), # DSFLAG11 (107-107)
# VALUE12, DMFLAG12, QCFLAG12, DSFLAG12 (108-115)
(107, 112), # VALUE12 (108-112)
(112, 113), # DMFLAG12 (113-113)
(113, 114), # QCFLAG12 (114-114)
(114, 115), # DSFLAG12 (115-115)
]
# Define column names
columns = [
'ID', 'YEAR', 'ELEMENT',
'VALUE1', 'DMFLAG1', 'QCFLAG1', 'DSFLAG1',
'VALUE2', 'DMFLAG2', 'QCFLAG2', 'DSFLAG2',
'VALUE3', 'DMFLAG3', 'QCFLAG3', 'DSFLAG3',
'VALUE4', 'DMFLAG4', 'QCFLAG4', 'DSFLAG4',
'VALUE5', 'DMFLAG5', 'QCFLAG5', 'DSFLAG5',
'VALUE6', 'DMFLAG6', 'QCFLAG6', 'DSFLAG6',
'VALUE7', 'DMFLAG7', 'QCFLAG7', 'DSFLAG7',
'VALUE8', 'DMFLAG8', 'QCFLAG8', 'DSFLAG8',
'VALUE9', 'DMFLAG9', 'QCFLAG9', 'DSFLAG9',
'VALUE10', 'DMFLAG10', 'QCFLAG10', 'DSFLAG10',
'VALUE11', 'DMFLAG11', 'QCFLAG11', 'DSFLAG11',
'VALUE12', 'DMFLAG12', 'QCFLAG12', 'DSFLAG12'
]
# Read the fixed-width file
df = pd.read_fwf(filepath, colspecs=colspecs, header=None, names=columns)
# Convert temperature values to numeric and replace -9999 with NaN
value_columns = [f'VALUE{i}' for i in range(1, 13)]
# **Workaround: Convert to string first, then to numeric**
for col in value_columns:
df[col] = df[col].astype(str).str.strip().replace('-9999', pd.NA)
# Fill NAType with a specific value before conversion
df[col] = df[col].fillna(-9999).astype(float)
# Convert temperature values to Celsius by dividing by 100
df[value_columns] = df[value_columns] / 100.0
data = read_temperature_data('~/Downloads/ghcnm.v4.0.1.20240916/ghcnm.tavg.v4.0.1.20240916.qfe.dat')
import pandas as pd
def read_temperature_data(filepath):
# Define the column specifications (start and end positions, inclusive)
colspecs = [
(0, 10),    # ID (1-11)
(11, 15),   # YEAR (12-15)
(15, 19),   # ELEMENT (16-19)
# VALUE1, DMFLAG1, QCFLAG1, DSFLAG1 (20-27)
(19, 24),   # VALUE1 (20-24)
(24, 25),   # DMFLAG1 (25-25)
(25, 26),   # QCFLAG1 (26-26)
(26, 27),   # DSFLAG1 (27-27)
# VALUE2, DMFLAG2, QCFLAG2, DSFLAG2 (28-35)
(27, 32),   # VALUE2 (28-32)
(32, 33),   # DMFLAG2 (33-33)
(33, 34),   # QCFLAG2 (34-34)
(34, 35),   # DSFLAG2 (35-35)
# VALUE3, DMFLAG3, QCFLAG3, DSFLAG3 (36-43)
(35, 40),   # VALUE3 (36-40)
(40, 41),   # DMFLAG3 (41-41)
(41, 42),   # QCFLAG3 (42-42)
(42, 43),   # DSFLAG3 (43-43)
# VALUE4, DMFLAG4, QCFLAG4, DSFLAG4 (44-51)
(43, 48),   # VALUE4 (44-48)
(48, 49),   # DMFLAG4 (49-49)
(49, 50),   # QCFLAG4 (50-50)
(50, 51),   # DSFLAG4 (51-51)
# VALUE5, DMFLAG5, QCFLAG5, DSFLAG5 (52-59)
(51, 56),   # VALUE5 (52-56)
(56, 57),   # DMFLAG5 (57-57)
(57, 58),   # QCFLAG5 (58-58)
(58, 59),   # DSFLAG5 (59-59)
# VALUE6, DMFLAG6, QCFLAG6, DSFLAG6 (60-67)
(59, 64),   # VALUE6 (60-64)
(64, 65),   # DMFLAG6 (65-65)
(65, 66),   # QCFLAG6 (66-66)
(66, 67),   # DSFLAG6 (67-67)
# VALUE7, DMFLAG7, QCFLAG7, DSFLAG7 (68-75)
(67, 72),   # VALUE7 (68-72)
(72, 73),   # DMFLAG7 (73-73)
(73, 74),   # QCFLAG7 (74-74)
(74, 75),   # DSFLAG7 (75-75)
# VALUE8, DMFLAG8, QCFLAG8, DSFLAG8 (76-83)
(75, 80),   # VALUE8 (76-80)
(80, 81),   # DMFLAG8 (81-81)
(81, 82),   # QCFLAG8 (82-82)
(82, 83),   # DSFLAG8 (83-83)
# VALUE9, DMFLAG9, QCFLAG9, DSFLAG9 (84-91)
(83, 88),   # VALUE9 (84-88)
(88, 89),   # DMFLAG9 (89-89)
(89, 90),   # QCFLAG9 (90-90)
(90, 91),   # DSFLAG9 (91-91)
# VALUE10, DMFLAG10, QCFLAG10, DSFLAG10 (92-99)
(91, 96),   # VALUE10 (92-96)
(96, 97),   # DMFLAG10 (97-97)
(97, 98),   # QCFLAG10 (98-98)
(98, 99),   # DSFLAG10 (99-99)
# VALUE11, DMFLAG11, QCFLAG11, DSFLAG11 (100-107)
(99, 104),  # VALUE11 (100-104)
(104, 105), # DMFLAG11 (105-105)
(105, 106), # QCFLAG11 (106-106)
(106, 107), # DSFLAG11 (107-107)
# VALUE12, DMFLAG12, QCFLAG12, DSFLAG12 (108-115)
(107, 112), # VALUE12 (108-112)
(112, 113), # DMFLAG12 (113-113)
(113, 114), # QCFLAG12 (114-114)
(114, 115), # DSFLAG12 (115-115)
]
# Define column names
columns = [
'ID', 'YEAR', 'ELEMENT',
'VALUE1', 'DMFLAG1', 'QCFLAG1', 'DSFLAG1',
'VALUE2', 'DMFLAG2', 'QCFLAG2', 'DSFLAG2',
'VALUE3', 'DMFLAG3', 'QCFLAG3', 'DSFLAG3',
'VALUE4', 'DMFLAG4', 'QCFLAG4', 'DSFLAG4',
'VALUE5', 'DMFLAG5', 'QCFLAG5', 'DSFLAG5',
'VALUE6', 'DMFLAG6', 'QCFLAG6', 'DSFLAG6',
'VALUE7', 'DMFLAG7', 'QCFLAG7', 'DSFLAG7',
'VALUE8', 'DMFLAG8', 'QCFLAG8', 'DSFLAG8',
'VALUE9', 'DMFLAG9', 'QCFLAG9', 'DSFLAG9',
'VALUE10', 'DMFLAG10', 'QCFLAG10', 'DSFLAG10',
'VALUE11', 'DMFLAG11', 'QCFLAG11', 'DSFLAG11',
'VALUE12', 'DMFLAG12', 'QCFLAG12', 'DSFLAG12'
]
# Read the fixed-width file
df = pd.read_fwf(filepath, colspecs=colspecs, header=None, names=columns)
# Convert temperature values to numeric and replace -9999 with NaN
value_columns = [f'VALUE{i}' for i in range(1, 13)]
for col in value_columns:
df[col] = df[col].astype(str).str.strip().replace('-9999', pd.NA)
# Handle NAType during conversion
df[col] = pd.to_numeric(df[col], errors='coerce').fillna(pd.NA)
# Convert temperature values to Celsius by dividing by 100
df[value_columns] = df[value_columns] / 100.0
return df
# Example usage:
data = read_temperature_data('~/Downloads/ghcnm.v4.0.1.20240916/ghcnm.tavg.v4.0.1.20240916.qfe.dat')
print(data.head())
data['ELEMENT']
data['ELEMENT'].unique()
ro_ids = data[data['ID'].str.startswith('RO')]
# Print the selected rows (optional)
print(ro_ids)
ro_ids['YEAR'].unique()
data = read_temperature_data('/Users/alexandrudumitrescu/Downloads/ghcnm.v4.0.1.20240916/ghcnm.tavg.v4.0.1.20240916.qcf.dat')
print(data.head())
ro_ids = data[data['ID'].str.startswith('RO')]
# Print the selected rows (optional)
print(ro_ids)
ro_ids['YEAR'].unique()
ro_ids['YEAR'].unique().sort()
ro_ids['YEAR'].unique().sort
ro_ids['YEAR'].unique().sorted()
ro_years = ro_ids['YEAR'].unique()
sorted(ro_years)
filtered_data = ro_ids[(ro_ids['YEAR'] >= 1901) & (ro_ids['YEAR'] <= 2023)]
# Print the filtered data (optional)
print(filtered_data)
ro_years = filtered_data['YEAR'].unique()
sorted(ro_years)
filtered_data['DSFLAG12'].unique()
filtered_data['DMFLAG12'].unique()
filtered_data.to_csv("/Users/alexandrudumitrescu/Downloads/ghcnm.v4.0.1.20240916/ghcnm.tavg.v4.0.1.20240916_rou.csv")
import pandas as pd
def parse_ghcnm_v4_dat_file(filepath):
cd
dfd
dsds
def parse_ghcnm_v4_dat_file(filepath):
# List to hold parsed data
data = []
# Open the .dat file for reading
with open(filepath, 'r') as file:
for line in file:
# Parse fixed-width columns based on the provided format
station_id = line[0:11].strip()
year = int(line[11:15].strip())
element = line[15:19].strip()
# Initialize a dictionary that will hold the data for this line
record = {
'station_id': station_id,
'year': year,
'element': element,
'monthly_data': []
}
# Loop through the 12 months, each month having VALUE, DMFLAG, QCFLAG, DSFLAG
for i in range(12):
value = int(line[19 + i * 8:24 + i * 8].strip())  # VALUE
dmflag = line[24 + i * 8:25 + i * 8].strip()      # DMFLAG
qcflag = line[25 + i * 8:26 + i * 8].strip()      # QCFLAG
dsflag = line[26 + i * 8:27 + i * 8].strip()      # DSFLAG
# Handle missing value (-9999)
if value == -9999:
value = None
else:
value = value / 100.0  # Convert to degrees Celsius
# Append monthly data to the record
record['monthly_data'].append({
'month': i + 1,  # Month (1 for January, 2 for February, etc.)
'value': value,
'dmflag': dmflag,
'qcflag': qcflag,
'dsflag': dsflag
})
# Append the record to the data list
data.append(record)
# Convert the data into a pandas DataFrame for easier analysis
rows = []
for record in data:
for month_data in record['monthly_data']:
rows.append({
'station_id': record['station_id'],
'year': record['year'],
'element': record['element'],
'month': month_data['month'],
'value': month_data['value'],
'dmflag': month_data['dmflag'],
'qcflag': month_data['qcflag'],
'dsflag': month_data['dsflag']
})
# Create a DataFrame
df = pd.DataFrame(rows)
return df
import pandas as pd
def parse_ghcnm_v4_dat_file(filepath):
# List to hold parsed data
data = []
# Open the .dat file for reading
with open(filepath, 'r') as file:
for line in file:
# Parse fixed-width columns based on the provided format
station_id = line[0:11].strip()
year = int(line[11:15].strip())
element = line[15:19].strip()
# Initialize a dictionary that will hold the data for this line
record = {
'station_id': station_id,
'year': year,
'element': element,
'monthly_data': []
}
# Loop through the 12 months, each month having VALUE, DMFLAG, QCFLAG, DSFLAG
for i in range(12):
value = int(line[19 + i * 8:24 + i * 8].strip())  # VALUE
dmflag = line[24 + i * 8:25 + i * 8].strip()      # DMFLAG
qcflag = line[25 + i * 8:26 + i * 8].strip()      # QCFLAG
dsflag = line[26 + i * 8:27 + i * 8].strip()      # DSFLAG
# Handle missing value (-9999)
if value == -9999:
value = None
else:
value = value / 100.0  # Convert to degrees Celsius
# Append monthly data to the record
record['monthly_data'].append({
'month': i + 1,  # Month (1 for January, 2 for February, etc.)
'value': value,
'dmflag': dmflag,
'qcflag': qcflag,
'dsflag': dsflag
})
# Append the record to the data list
data.append(record)
# Convert the data into a pandas DataFrame for easier analysis
rows = []
for record in data:
for month_data in record['monthly_data']:
rows.append({
'station_id': record['station_id'],
'year': record['year'],
'element': record['element'],
'month': month_data['month'],
'value': month_data['value'],
'dmflag': month_data['dmflag'],
'qcflag': month_data['qcflag'],
'dsflag': month_data['dsflag']
})
# Create a DataFrame
df = pd.DataFrame(rows)
return df
data = parse_ghcnm_v4_dat_file('/Users/alexandrudumitrescu/Downloads/ghcnm.v4.0.1.20240916/ghcnm.tavg.v4.0.1.20240916.qcf.dat')
print(data.head())
ro_ids = data[data['station_id'].str.startswith('RO')]
# Print the selected rows (optional)
print(ro_ids)
filtered_data = ro_ids[(ro_ids['YEAR'] >= 1901) & (ro_ids['YEAR'] <= 2023)]
filtered_data = ro_ids[(ro_ids['year'] >= 1901) & (ro_ids['year'] <= 2023)]
# Print the filtered data (optional)
ro_years = filtered_data['year'].unique()
sorted(ro_years)
print(filtered_data)
filtered_data['dsflag'].unique()
filtered_data['dmflag'].unique()
filtered_data['qcflag'].unique()
filtered_data.to_csv("/Users/alexandrudumitrescu/Downloads/ghcnm.v4.0.1.20240916/ghcnm.tavg.v4.0.1.20240916_rou.csv")
import pandas as pd
def read_ghcnm_data(file_path):
"""
Reads a GHCNM v4 .dat file and returns a pandas DataFrame.
Args:
file_path: Path to the .dat file.
Returns:
A pandas DataFrame containing the data.
"""
colspecs = [
(0, 11), (11, 15), (15, 19),
(19, 24), (24, 25), (25, 26), (26, 27),
(27, 32), (32, 33), (33, 34), (34, 35),
(35, 40), (40, 41), (41, 42), (42, 43),
(43, 48), (48, 49), (49, 50), (50, 51),
(51, 56), (56, 57), (57, 58), (58, 59),
(59, 64), (64, 65), (65, 66), (66, 67),
(67, 72), (72, 73), (73, 74), (74, 75),
(75, 80), (80, 81), (81, 82), (82, 83),
(83, 88), (88, 89), (89, 90), (90, 91),
(91, 96), (96, 97), (97, 98), (98, 99),
(99, 104), (104, 105), (105, 106), (106, 107),
(107, 112), (112, 113), (113, 114), (114, 115)
]
names = [
"ID", "YEAR", "ELEMENT",
"VALUE1", "DMFLAG1", "QCFLAG1", "DSFLAG1",
"VALUE2", "DMFLAG2", "QCFLAG2", "DSFLAG2",
"VALUE3", "DMFLAG3", "QCFLAG3", "DSFLAG3",
"VALUE4", "DMFLAG4", "QCFLAG4", "DSFLAG4",
"VALUE5", "DMFLAG5", "QCFLAG5", "DSFLAG5",
"VALUE6", "DMFLAG6", "QCFLAG6", "DSFLAG6",
"VALUE7", "DMFLAG7", "QCFLAG7", "DSFLAG7",
"VALUE8", "DMFLAG8", "QCFLAG8", "DSFLAG8",
"VALUE9", "DMFLAG9", "QCFLAG9", "DSFLAG9",
"VALUE10", "DMFLAG10", "QCFLAG10", "DSFLAG10",
"VALUE11", "DMFLAG11", "QCFLAG11", "DSFLAG11",
"VALUE12", "DMFLAG12", "QCFLAG12", "DSFLAG12"
]
df = pd.read_fwf(file_path, colspecs=colspecs, names=names, dtype=str)
# Convert temperature values to numeric (Celsius)
for i in range(1, 13):
df[f"VALUE{i}"] = pd.to_numeric(df[f"VALUE{i}"], errors='coerce').fillna(-9999) / 100.0
return df
# Example usage:
file_path = "your_data_file.dat"  # Replace with the actual file path
df = read_ghcnm_data(file_path)
print(df.head())
import pandas as pd
def read_ghcnm_data(file_path):
"""
Reads a GHCNM v4 .dat file and returns a pandas DataFrame.
Args:
file_path: Path to the .dat file.
Returns:
A pandas DataFrame containing the data.
"""
colspecs = [
(0, 11), (11, 15), (15, 19),
(19, 24), (24, 25), (25, 26), (26, 27),
(27, 32), (32, 33), (33, 34), (34, 35),
(35, 40), (40, 41), (41, 42), (42, 43),
(43, 48), (48, 49), (49, 50), (50, 51),
(51, 56), (56, 57), (57, 58), (58, 59),
(59, 64), (64, 65), (65, 66), (66, 67),
(67, 72), (72, 73), (73, 74), (74, 75),
(75, 80), (80, 81), (81, 82), (82, 83),
(83, 88), (88, 89), (89, 90), (90, 91),
(91, 96), (96, 97), (97, 98), (98, 99),
(99, 104), (104, 105), (105, 106), (106, 107),
(107, 112), (112, 113), (113, 114), (114, 115)
]
names = [
"ID", "YEAR", "ELEMENT",
"VALUE1", "DMFLAG1", "QCFLAG1", "DSFLAG1",
"VALUE2", "DMFLAG2", "QCFLAG2", "DSFLAG2",
"VALUE3", "DMFLAG3", "QCFLAG3", "DSFLAG3",
"VALUE4", "DMFLAG4", "QCFLAG4", "DSFLAG4",
"VALUE5", "DMFLAG5", "QCFLAG5", "DSFLAG5",
"VALUE6", "DMFLAG6", "QCFLAG6", "DSFLAG6",
"VALUE7", "DMFLAG7", "QCFLAG7", "DSFLAG7",
"VALUE8", "DMFLAG8", "QCFLAG8", "DSFLAG8",
"VALUE9", "DMFLAG9", "QCFLAG9", "DSFLAG9",
"VALUE10", "DMFLAG10", "QCFLAG10", "DSFLAG10",
"VALUE11", "DMFLAG11", "QCFLAG11", "DSFLAG11",
"VALUE12", "DMFLAG12", "QCFLAG12", "DSFLAG12"
]
df = pd.read_fwf(file_path, colspecs=colspecs, names=names, dtype=str)
# Convert temperature values to numeric (Celsius)
for i in range(1, 13):
df[f"VALUE{i}"] = pd.to_numeric(df[f"VALUE{i}"], errors='coerce').fillna(-9999) / 100.0
return df
data = read_ghcnm_data('/Users/alexandrudumitrescu/Downloads/ghcnm.v4.0.1.20240916/ghcnm.tavg.v4.0.1.20240916.qcf.dat')
print(data.head())
ro_ids = data[data['ID'].str.startswith('RO')]
# Print the selected rows (optional)
print(ro_ids)
filtered_data = ro_ids[(ro_ids['YEAR'] >= 1901) & (ro_ids['YEAR'] <= 2023)]
print(ro_ids)
filtered_data = ro_ids[(ro_ids['YEAR'] >= 1901) & (ro_ids['YEAR'] <= 2023)]
ro_ids['YEAR'] = pd.to_numeric(ro_ids['YEAR'])
ro_ids = ro_ids.copy()
ro_ids['YEAR'] = pd.to_numeric(ro_ids['YEAR'])
filtered_data = ro_ids[(ro_ids['YEAR'] >= 1901) & (ro_ids['YEAR'] <= 2023)]
# Print the filtered data (optional)
print(filtered_data)
filtered_data['DSFLAG12'].unique()
filtered_data.to_csv("/Users/alexandrudumitrescu/Downloads/ghcnm.v4.0.1.20240916/ghcnm.tavg.v4.0.1.20240916_rou.csv")
ls
setwd("~/Documents/clima/2024/roclihom")
